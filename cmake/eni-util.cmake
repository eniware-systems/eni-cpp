cmake_minimum_required(VERSION 3.27)

# Capitalizes a string
#
# Usage: eni_string_capitalize("my-string" MyVar)
function(eni_string_capitalize STR RESULT)
    string(SUBSTRING ${STR} 0 1 HEAD)
    string(TOUPPER ${HEAD} HEAD)
    string(SUBSTRING ${STR} 1 -1 TAIL)

    set(${RESULT} "${HEAD}${TAIL}" PARENT_SCOPE)
endfunction()

# Converts a string into CamelCase
#
# Usage: eni_string_to_camel_case("my-string" MyVar)
function(eni_string_to_camel_case STR OUT)
    string(REGEX REPLACE "[-_\\w]+" ";" TMP "${STR}")
    string(REGEX REPLACE "([A-Z]+)([A-Z][a-z]+)" "\\1;\\2" TMP "${TMP}")
    string(REGEX REPLACE "([a-z]+)([A-Z])" "\\1;\\2" TMP "${TMP}")
    string(TOLOWER "${TMP}" TMP)

    foreach (COMPONENT ${TMP})
        eni_string_capitalize(${COMPONENT} COMPONENT)
        set(RESULT "${RESULT}${COMPONENT}")
    endforeach ()

    set(${OUT} "${RESULT}" PARENT_SCOPE)
endfunction()

# Gathers all source files a the given directory.
#
# Parameters:
#   OUT: the name of the list variable in which the results should be stored
#   QUIET: boolean flag indicating whether to output information to the log
#
# Exmaple Usage:
#
# eni_gather_sources(OUT MY_SOURCES
#        ${CMAKE_CURRENT_SOURCE_DIR}/src
# )
#
function(eni_gather_sources)
    cmake_parse_arguments(
            ARG
            "QUIET"
            "OUT" ,
            "" ,
            ${ARGN}
    )

    if (NOT ARG_OUT)
        # set default output variable
        SET(ARG_OUT SOURCES)
    endif ()

    set(out ${ARG_OUT})

    set(dirs ${ARG_UNPARSED_ARGUMENTS})

    set(extensions "cpp" "cxx" "c" "hpp" "hxx" "h")

    foreach (dir IN LISTS dirs)
        set(glob_patterns "")
        foreach (ext IN LISTS extensions)
            list(APPEND glob_patterns "${dir}/*.${ext}")
            list(APPEND glob_patterns "${dir}/**/*.${ext}")
        endforeach ()
        file(GLOB_RECURSE dir_srcs CONFIGURE_DEPENDS ${glob_patterns})

        foreach (result IN LISTS dir_srcs)
            list(APPEND results ${result})
        endforeach ()

    endforeach ()

    set(tmp ${${out}})
    list(APPEND tmp ${results})
    set(${out} "${tmp}" PARENT_SCOPE)

    if (NOT ARG_QUIET)
        set(message "Autogenerated source list from file system. If you don't like this behaviour you can use this instead:\nlist(APPEND ${out}\n")
        foreach (result IN LISTS results)
            file(RELATIVE_PATH result_rel "${CMAKE_CURRENT_SOURCE_DIR}" ${result})
            set(message "${message}\t${result_rel}\n")
        endforeach ()
        set(message "${message})")

        message(STATUS "${message}")
    endif ()
endfunction()